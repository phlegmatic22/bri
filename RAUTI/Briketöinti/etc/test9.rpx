<?xml version="1.0" encoding="UTF-8"?>
<ActiveReportsLayout Version="3.1" PrintWidth="18420" DocumentName="ARNet Document" ScriptLang="C#" UserData="AAEAAAD/////AQAAAAAAAAAEAQAAABxTeXN0ZW0uQ29sbGVjdGlvbnMuSGFzaHRhYmxlBwAAAApMb2FkRmFjdG9yB1ZlcnNpb24IQ29tcGFyZXIQSGFzaENvZGVQcm92aWRlcghIYXNoU2l6ZQRLZXlzBlZhbHVlcwAAAwMABQULCBxTeXN0ZW0uQ29sbGVjdGlvbnMuSUNvbXBhcmVyJFN5c3RlbS5Db2xsZWN0aW9ucy5JSGFzaENvZGVQcm92aWRlcgjsUTg/AAAAAAoKCwAAAAkCAAAACQMAAAAQAgAAAAAAAAAQAwAAAAAAAAALAAAAAAAAAAAAAAAAAAAAAA==" MasterReport="0">
  <StyleSheet>
    <Style Name="Normal" Value="font-family: Arial; font-style: normal; text-decoration: none; font-weight: normal; font-size: 10pt; color: Black" />
    <Style Name="Heading1" Value="font-size: 16pt; font-weight: bold" />
    <Style Name="Heading2" Value="font-family: Times New Roman; font-size: 14pt; font-weight: bold; font-style: italic" />
    <Style Name="Heading3" Value="font-size: 13pt; font-weight: bold" />
  </StyleSheet>
  <Sections>
    <Section Type="ReportHeader" Name="ReportHeader1" Height="63200" BackColor="16777215">
      <Control Type="AR.Field" Name="TextBox9" Tag="&lt;FieldConfigurationDS xmlns=&quot;http://tempuri.org/ChartConfiguration.xsd&quot;&gt;&#xD;&#xA;  &lt;FieldConfiguration FieldConfiguration_Id=&quot;0&quot;&gt;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;FieldConfiguration_Id&gt;0&lt;/FieldConfiguration_Id&gt;&#xD;&#xA;      &lt;Name&gt;DataBinding&lt;/Name&gt;&#xD;&#xA;      &lt;PropertyGroup_Id&gt;0&lt;/PropertyGroup_Id&gt;&#xD;&#xA;      &lt;Property&gt;&#xD;&#xA;        &lt;Name&gt;DataField&lt;/Name&gt;&#xD;&#xA;        &lt;Value&gt;22811&lt;/Value&gt;&#xD;&#xA;        &lt;PropertyGroup_Id&gt;0&lt;/PropertyGroup_Id&gt;&#xD;&#xA;        &lt;CustomData /&gt;&#xD;&#xA;        &lt;Description /&gt;&#xD;&#xA;      &lt;/Property&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;FieldConfiguration_Id&gt;0&lt;/FieldConfiguration_Id&gt;&#xD;&#xA;      &lt;Name&gt;FormatProperties&lt;/Name&gt;&#xD;&#xA;      &lt;PropertyGroup_Id&gt;1&lt;/PropertyGroup_Id&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;  &lt;/FieldConfiguration&gt;&#xD;&#xA;&lt;/FieldConfigurationDS&gt;" Left="17375.04" Top="1166.401" Width="630" Height="288" Text="PrintTime" OutputFormat="HH:mm" Style="text-align: right; white-space: inherit" />
      <Control Type="AR.Field" Name="TextBox17" Tag="" Left="15035.04" Top="1166.401" Width="1260" Height="288" Text="Tulostusaika:" OutputFormat="dd.MM.yyyy" Style="white-space: inherit" />
      <Control Type="AR.Image" Name="Picture1" Left="15664.32" Top="0.0006866455" Width="2340.72" Height="879.84" LineColor="16777215" LineWeight="0" SizeModeontrol>
      <Control Type="AR.Field" Name="TextBox14" Tag="&lt;FieldConfigurationDS xmlns=&quot;http://tempuri.org/ChartConfiguration.xsd&quot;&gt;&#xD;&#xA;  &lt;FieldConfiguration FieldConfiguration_Id=&quot;0&quot;&gt;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;FieldConfiguration_Id&gt;0&lt;/FieldConfiguration_Id&gt;&#xD;&#xA;      &lt;Name&gt;DataBinding&lt;/Name&gt;&#xD;&#xA;      &lt;PropertyGroup_Id&gt;0&lt;/PropertyGroup_Id&gt;&#xD;&#xA;      &lt;Property&gt;&#xD;&#xA;        &lt;Name&gt;DataField&lt;/Name&gt;&#xD;&#xA;        &lt;Value&gt;22810&lt;/Value&gt;&#xD;&#xA;        &lt;PropertyGroup_Id&gt;0&lt;/PropertyGroup_Id&gt;&#xD;&#xA;        &lt;CustomData /&gt;&#xD;&#xA;        &lt;Description /&gt;&#xD;&#xA;      &lt;/Property&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;FieldConfiguration_Id&gt;0&lt;/FieldConfiguration_Id&gt;&#xD;&#xA;      &lt;Name&gt;FormatProperties&lt;/Name&gt;&#xD;&#xA;      &lt;PropertyGroup_Id&gt;1&lt;/PropertyGroup_Id&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;  &lt;/FieldConfiguration&gt;&#xD;&#xA;&lt;/FieldConfigurationDS&gt;" Left="16205.04" Top="1166.401" Width="1170" Height="288" Text="PrintDate" OutputFormat="dd.MM.yyyy" Style="text-align: right; white-space: nowrap" />
      <Control Type="AR.Field" Name="TextBox12" Left="4088.16" Top="2324.161" Width="2040" Height="540" Text="Sideainesiilojen pinnat" HyperLink="4" Style="font-size: 12pt; font-weight: bold; text-align: center" />
      <Control Type="AR.Field" Name="TextBox18" Left="6330.241" Top="2324.161" Width="2040" Height="540" Text="Tuotannon laatutiedot" HyperLink="6" Style="font-size: 12pt; font-weight: bold; text-align: center" />
      <Control Type="AR.Field" Name="TextBox13" Left="8565.121" Top="2324.161" Width="2040" Height="540" Text="Tuotantotiedot vrk" HyperLink="8" Style="font-size: 12pt; font-weight: bold; text-align: center" />
      <Control Type="AR.Field" Name="TextBox20" Left="11370.24" Top="2341.441" Width="2220.481" Height="540" Text="Annosvaakasuhde" HyperLink="9" Style="font-size: 12pt; font-weight: bold" />
    </Section>
    <Section Type="PageHeader" Name="PageHeader1" Height="360" BackColor="16777215" />
    <Section Type="Detail" Name="Detail1" Height="360" BackColor="16777215" />
    <Section Type="PageFooter" Name="PageFooter1" Height="360" BackColor="16777215" />
    <Section Type="ReportFooter" Name="ReportFooter1" Height="360" BackColor="16777215" />
  </Sections>
  <ReportComponentTray />
  <Script><![CDATA[static int lineWidth = 2;

  

  
static System.Drawing.Color[] serieColors = new System.Drawing.Color[4]{
	System.Drawing.Color.Red,
	System.Drawing.Color.Blue,
	System.Drawing.Color.Black,
	System.Drawing.Color.Green
};

static System.Drawing.Color backColor = System.Drawing.Color.White;

static int labelFontSize = 12;
static int titleFontSize = 12;


const int graphCount = 4;
static string[] graphTitles = new string[graphCount]{"Kuvaaja1","Kuvaaja2","Kuvaaja3","Kuvaaja4"};

static string[] titles1 = new string[] {"Aika","Mittaus1","Mittaus2","Mittaus3","Mittaus4"};
static string[] titles2 = new string[] {"Aika","Mittaus1","Mittaus2","Mittaus3"};
static string[] titles3 = new string[] {"Aika","Mittaus1","Mittaus2","Mittaus3","Mittaus4"};
static string[] titles4 = new string[] {"Aika","Mittaus1","Mittaus2","Mittaus3","Mittaus4"};

static string[][] titlesList = new string[][]{titles1,titles2,titles3,titles4};


static string[] formats1 = new string[] {"line","line","line","points"};
static string[] formats2 = new string[] {"bar","bar","bar"};
static string[] formats3 = new string[] {"line","line","line","points"};
static string[] formats4 = new string[] {"line","line","line","points"};

static string[][] formatList = new string[][]{formats1,formats2,formats3,formats4};

static int[][] limitsAndIncrement1 = new int[][]{new int[]{500, 0, 50},new int[]{200, 0, 25},new int[]{250, 0, 25},new int[]{200, 0, 25}};
static int[][] limitsAndIncrement2 = new int[][]{new int[]{500, 0, 50},new int[]{200, 0, 25},new int[]{250, 0, 25},new int[]{200, 0, 25}};
static int[][] limitsAndIncrement3 = new int[][]{new int[]{500, 0, 50},new int[]{200, 0, 25},new int[]{250, 0, 25},new int[]{200, 0, 25}};
static int[][] limitsAndIncrement4 = new int[][]{new int[]{500, 0, 50},new int[]{200, 0, 25},new int[]{250, 0, 25},new int[]{200, 0, 25}};


static string[] tagList1 = new string[]{"sim1m_1:avg","sim1m_2:avg","sim1m_5:avg","sim1m_6:avg"};
static string[] tagList2 = new string[]{"sim1m_3:avg","sim1m_4:avg","sim1m_7:avg"};
static string[] tagList3 = new string[]{"sim1m_1:avg","sim1m_2:avg","sim1m_5:avg","sim1m_6:avg"};
static string[] tagList4 = new string[]{"sim1m_1:avg","sim1m_2:avg","sim1m_5:avg","sim1m_6:avg"};


static string[][] tagLists = new string[][]{tagList1,tagList2,tagList3,tagList4};

static int[][][] limitsAndIncrementsList = new int[][][]{limitsAndIncrement1,limitsAndIncrement2,limitsAndIncrement3,limitsAndIncrement4};

string tracerImageLink = @"D:\DNA\Data\IA\DNAreport\RAUTI\Briketöinti\etc\test.png";
string tracerPathTemplate = "http://localhost/DNA/DNATracer?report=_Templates/Trend&tags=";

string header = "Briketöintilaitos";
string header2 = "PROSESSIN SEURANTA";

float spacer = 1.5f;
float yStart = 2.0f;
float graphHeight = 8.0f;
float xStart = 0.45f;
float graphWidth = 12.0f;
float reportWidth = 14.0f;

public void ActiveReport_ReportStart()
{

	TextBox headerBox = new TextBox();
	headerBox.Text = header;
	headerBox.Left = 0.1f;
	headerBox.Width = reportWidth - 1.2f;
	headerBox.Height = 0.35f;
	headerBox.Style = "color: #00005A; font-size: 20pt; font-weight: bold; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1";
	rpt.Sections["ReportHeader1"].Controls.Add(headerBox);
	
	TextBox headerBox2 = new TextBox();
	headerBox2.Text = header2;
	headerBox2.Top = headerBox.Height;
	headerBox2.Left = 0f;
	headerBox2.Width = reportWidth - 1.0f;
	headerBox2.Height = 0.35f;
	headerBox2.Style = "color: #00005A; font-size: 16pt; font-weight: bold; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1";
	rpt.Sections["ReportHeader1"].Controls.Add(headerBox2);
	
	Shape headerRect = new Shape();
	headerRect.Top = 0.4f + headerBox.Height + headerBox2.Height;
	headerRect.Left = 0.7f;
	headerRect.Width = reportWidth - 2.2f;
	headerRect.Height = 0.25f;
	headerRect.BackColor = System.Drawing.Color.FromArgb(0, 0, 90);
	rpt.Sections["ReportHeader1"].Controls.Add(headerRect);
	

	

	for (int i = 0; i < graphCount; i++){

		System.Data.DataSet[] dsList = getDataSets(tagLists[i], i);

		System.Data.DataSet dsHistoryData = dsList[0];
		System.Data.DataSet dsTagInfo = dsList[1];
		int seriesCount = tagLists[i].Length;
		setReportConfigs(dsHistoryData);

		
		CustomControl currControl = new  CustomControl(new Steema.TeeChart.TChart().GetType());
		Steema.TeeChart.TChart currChart = (Steema.TeeChart.TChart) currControl.Control;
		
		currControl.Height = graphHeight;
		currControl.Width = graphWidth;
		currControl.Left = xStart;
		currControl.Top = yStart + i * (graphHeight + spacer);
		
		
		
		Picture tracerLink = new Picture();
		System.Drawing.Image img  = System.Drawing.Image.FromFile(tracerImageLink);
		tracerLink.Image = img;
		tracerLink.Name = "Pic"+(i+1).ToString();
		tracerLink.Top = yStart + (i+1)*(spacer + graphHeight)- 2.5f;
		tracerLink.Left = xStart + graphWidth - 0.2f ;
		tracerLink.Width = 0.3f;
		tracerLink.Height = 0.3f;
		
		string tracerHyperLink = tracerPathTemplate;
		for(int serieNr = 0; serieNr < seriesCount; serieNr++){
			tracerHyperLink = tracerHyperLink + tagLists[i][serieNr].Split(':')[0];
			if(serieNr != seriesCount - 1){
				tracerHyperLink = tracerHyperLink + "&tags=";
			}
		}
		string startTime = System.DateTime.Parse(g_Parameters["startTime"]).ToString("s");
		string endTime = System.DateTime.Parse(g_Parameters["endTime"]).ToString("s");
		tracerHyperLink = tracerHyperLink + "&RelativeStartTime=" + startTime + "&RelativeEndTime=" + endTime;
		tracerLink.HyperLink = tracerHyperLink;
		


		

		
		currChart.Panel.MarginBottom = 5;
		currChart.Panel.MarginLeft = 8;
		currChart.Panel.MarginRight = 8;
		currChart.Panel.MarginTop = 5;
	
		currChart.Header.Visible = true;
		currChart.Header.Text = graphTitles[i];
		currChart.Header.Font.Size = 15;
		currChart.Header.Font.Color = System.Drawing.Color.Black;
		currChart.BackColor = backColor;
		
		currChart.Legend.Visible = false;
		currChart.Aspect.View3D = false;	
		currChart.Legend.Visible = false;
		currChart.Legend.Alignment = Steema.TeeChart.LegendAlignments.Bottom;
		currChart.Legend.Shadow.Visible = false;
		currChart.Panel.Brush.Visible = true;
		currChart.Panel.Bevel.Inner = Steema.TeeChart.Drawing.BevelStyles.None;
		currChart.Panel.Bevel.Outer = Steema.TeeChart.Drawing.BevelStyles.None;

		createCustomAxes(currChart);
		formatSeries(currChart, dsHistoryData, formatList[i]);
		formatAxes(currChart, titlesList[i], formatList[i], limitsAndIncrementsList[i]);
		buildLegend(dsTagInfo, i);


	

		rpt.Sections["ReportHeader1"].Controls.Add(currControl);
		rpt.Sections["ReportHeader1"].Controls.Add(tracerLink);


	}


	

	

	
}

public void formatAxes(Steema.TeeChart.TChart chart, string[] titleList, string[] formatList, int[][] limits){

	
	Steema.TeeChart.Axis[] axisList = new Steema.TeeChart.Axis[5]{
		chart.Axes.Bottom,
		chart.Axes.Left,
		chart.Axes.Right,
		chart.Axes.Custom[0],
		chart.Axes.Custom[1]
		};
	
	int length = axisList.Length;
	int titleListLength = titleList.Length;
	int[] angleList = new int[4]{90,270,90,270};

	
	for (int i = 0; i < length; i++){

		if(i == 0){
			axisList[0].Title.Font.Size = titleFontSize;
			axisList[0].Labels.Font.Size = labelFontSize - 2;
		}
		
		if(i < titleListLength){
			axisList[i].Title.Text = titleList[i]; // TÄSSÄ
		}

		if(i >= titleListLength){
			//chart.Series[i - 1].Visible = false;
			axisList[i].Visible = false;
		}

		if(i == 3){
			axisList[i].OtherSide = false;
			axisList[i].RelativePosition = -8;

		}
		
		
		
		if(i == 4){
			axisList[i].OtherSide = true;
			axisList[i].RelativePosition = -8;
		}

		if(i != 0){

			axisList[i].Automatic = false;
			axisList[i].AutomaticMaximum = false;
			axisList[i].AutomaticMinimum = false;
			axisList[i].Maximum = limits[i - 1][0];
			axisList[i].Minimum = limits[i - 1][1];
			axisList[i].Increment = limits[i - 1][2];
			axisList[i].Title.Angle = angleList[i - 1];
			
			axisList[i].Title.Font.Size = titleFontSize;
			axisList[i].Labels.Font.Size = labelFontSize;
			axisList[i].Title.Font.Color = serieColors[i - 1];
			axisList[i].Labels.Font.Color = serieColors[i - 1];
		}
		


	}
	
	chart.Axes.Bottom.Labels.DateTimeFormat = "hh:mm ddd";

	int seriesCount = chart.Series.Count;
	
	
	
	for (int j = 0; j < seriesCount; j++){

		if(j == 0){
			chart.Series[j].VertAxis = Steema.TeeChart.Styles.VerticalAxis.Right;
		}
		else{
			chart.Series[j].VertAxis = Steema.TeeChart.Styles.VerticalAxis.Custom;

		}
		chart.Series[j].HorizAxis = Steema.TeeChart.Styles.HorizontalAxis.Bottom;

	}

}

public void formatSeries(Steema.TeeChart.TChart chart, System.Data.DataSet ds, string[] formatList){

	int length = formatList.Length;
	
	
	for (int i = 0; i < length; i++){
		if(formatList[i] == "points"){
			Steema.TeeChart.Styles.Points points = new Steema.TeeChart.Styles.Points();
			points.DataSource = ds.Tables["Values"];
			points.XValues.DataMember = "ts";
			points.XValues.DateTime = true;
			points.YValues.DataMember = "value"+i.ToString();
			points.CheckDataSource();
			points.Color = serieColors[i];
			
			if(i == 2){
				points.CustomVertAxis = chart.Axes.Custom[0];
			}
			if(i == 3){
				points.CustomVertAxis = chart.Axes.Custom[1];
			}
			
			chart.Series.Add(points);
		}
		else if(formatList[i] == "line"){
		
			Steema.TeeChart.Styles.Line line = new Steema.TeeChart.Styles.Line();
			line.DataSource = ds.Tables["Values"];
			line.LinePen.Width = lineWidth;
			line.XValues.DataMember = "ts";
			line.XValues.DateTime = true;
			line.YValues.DataMember = "value"+i.ToString();
			line.CheckDataSource();
			line.Color = serieColors[i];
			
			if(i == 2){
				line.CustomVertAxis = chart.Axes.Custom[0];
			}
			if(i == 3){
				line.CustomVertAxis = chart.Axes.Custom[1];
			}
			
			chart.Series.Add(line);
		}
		else if(formatList[i] == "bar"){
		
			Steema.TeeChart.Styles.Bar bar = new Steema.TeeChart.Styles.Bar();
			bar.DataSource = ds.Tables["Values"];
			//line.LinePen.Width = lineWidth;
			bar.XValues.DataMember = "ts";
			bar.XValues.DateTime = true;
			bar.YValues.DataMember = "value"+i.ToString();
			bar.CheckDataSource();
			bar.Color = serieColors[i];
			bar.MultiBar = Steema.TeeChart.Styles.MultiBars.Side;
			bar.Marks.Visible = false;
			bar.BarWidthPercent = 70;


			
			if(i == 2){
				bar.CustomVertAxis = chart.Axes.Custom[0];
			}
			if(i == 3){
				bar.CustomVertAxis = chart.Axes.Custom[1];
			}
			
			chart.Series.Add(bar);
		}
	}


}

public System.Data.DataSet[] getDataSets(string[] tagStringList, int j){

	Metso.DNA.IA.DNAdata.Interfaces.IDNAdataObject dobj = 
		(Metso.DNA.IA.DNAdata.Interfaces.IDNAdataObject) Metso.DNA.IA.DNAdata.RemoteUtils.CreateRemote("DNAdataObject");
	
	string startTimeSTR = g_Parameters[0];
	string endTimeSTR = g_Parameters[1];
	

	DateTime startTime = DateTime.Parse(startTimeSTR);
	DateTime endTime = DateTime.Parse(endTimeSTR);
	System.Collections.Generic.List <string> tagNameList = new System.Collections.Generic.List<string> ();
	System.Collections.Generic.List <string> operationList = new System.Collections.Generic.List<string> ();

	
	
	
	for(int i = 0; i < tagStringList.Length; i++){

		string tagString = tagStringList[i];

		string tagName = tagString.Split(':')[0];
		string operation = tagString.Split(':')[1];

		tagNameList.Add(tagName);
		operationList.Add(operation);
		
	}
	string[] tagNameListArray = tagNameList.ToArray();
	string[] operationListArray = operationList.ToArray();
	

	
	string[] period = new string[1];
	period[0] = TimeSpan.FromMinutes(endTime.Subtract(startTime).TotalMinutes/ 20 ).ToString(@"dd\.hh\:mm");
	string[] optionsList = new string[1];
	optionsList[0] = "TS_START";


	System.Data.DataSet dataQuery = (System.Data.DataSet) (dobj.InvokeMethod("Combination", "localhost" + "/Query.BasicQueries.Extended", null, startTime, endTime, period, optionsList, tagNameListArray, operationListArray, new string[]{"(null)"}, new string[]{"(null)"}, new string[]{"(null)"}, new string[]{"(null)"}, new string[]{"(null)"}));
	System.Data.DataSet tagInfoQuery = (System.Data.DataSet) (dobj.InvokeMethod("TagInformation_List", "localhost" + "/Query.BasicQueries.Information", null, tagNameListArray, "(null)"));
	if(dataQuery.Tables.Count == 0)
	{
		throw new Exception("No data");
	}
	System.Data.DataSet[] dsList = new System.Data.DataSet[]{dataQuery, tagInfoQuery};
	
	return dsList;
}
public void createCustomAxes(Steema.TeeChart.TChart chart){
	
	Steema.TeeChart.Axis Custom0 = new Steema.TeeChart.Axis(chart.Chart);
	Steema.TeeChart.Axis Custom1 = new Steema.TeeChart.Axis(chart.Chart);
	
	Custom0.AxisPen.Visible = true;
	Custom0.Grid.Visible = false;
	
	Custom1.AxisPen.Visible = true;
	Custom1.Grid.Visible = false;
	
	chart.Axes.Left.Grid.Visible = true;
	chart.Axes.Right.Grid.Visible = false;
	
	chart.Axes.Custom.Add(Custom0);
	chart.Axes.Custom.Add(Custom1);
}

public void setReportConfigs(System.Data.DataSet ds){
	// Custom printer settings: fixes broken charts that are in page break position
	rpt.Document.Printer.PrinterName = "";
	rpt.PageSettings.PaperKind = System.Drawing.Printing.PaperKind.Custom;
	// Config -> 35000 so graphs place evenly (one tall paper), might break printing somehow
	rpt.Document.Printer.PaperSize = new System.Drawing.Printing.PaperSize("CustomSize", 1000, 35000);
	rpt.PrintWidth = reportWidth;
	
	
	rpt.DataSource = ds;
	rpt.DataMember = "Values";
	rpt.UserData = "";
}

public void buildLegend(System.Data.DataSet tagInfo, int j ){

	string[] texts = new string[3]{"Description", "TagName", "Unit"};
	string[] textsFin = new string[3]{"Kuvaus", "Positio", "Yksikkö"};
	float[] widths = new float[3]{3.0f, 3.0f, 3.0f};
	float colHeight = 0.2f;
	

	for (int column = 0; column < texts.Length; column++){
	

		for(int row = 0; row < tagInfo.Tables[0].Rows.Count; row++){
			if(row == 0){
				TextBox boxColumnHeader = new TextBox();
				string textColumnHeader = textsFin[column];
				if(textColumnHeader == "" && column == 0)textColumnHeader = "This is a testing description";
				if(textColumnHeader == "" && column == 2)textColumnHeader = "kg/nm3";
				boxColumnHeader.Height = colHeight;
				boxColumnHeader.Top = yStart + (j + 1) * (graphHeight)+ j * spacer + (row  * colHeight) - 0.02f ;
				boxColumnHeader.Left = graphWidth / 8 + (column * ( graphWidth / 4));
				boxColumnHeader.Text = textColumnHeader;
				boxColumnHeader.Style = "font-size: 11pt";
				boxColumnHeader.ForeColor = serieColors[2];
				boxColumnHeader.Width = widths[column];
				rpt.Sections["ReportHeader1"].Controls.Add(boxColumnHeader);
			}
			TextBox box = new TextBox();
			string text = tagInfo.Tables[0].Rows[row][texts[column]].ToString();
			if(text == "" && column == 0)text = "This is a testing description";
			if(text == "" && column == 2)text = "kg/nm3";
			box.Height = colHeight;
			box.Top = yStart + (j + 1) * (graphHeight)+ j * spacer + (row * colHeight) + colHeight;
			box.Left = graphWidth / 8 + (column * ( graphWidth / 4));
			box.Text = text;
			box.ForeColor = serieColors[row];
			box.Width = widths[column];
			rpt.Sections["ReportHeader1"].Controls.Add(box);
		}

	}


}



]]></Script>
  <PageSettings />
  <Parameters />
</ActiveReportsLayout>